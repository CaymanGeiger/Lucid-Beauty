// schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model AgeRequirement {
  id       Int       @id @default(autoincrement())
  required Boolean   @default(false)
  age      Int
  reason   String    @db.VarChar(200)
  services Service[]

  AdditionalService AdditionalService[]
}

model Service {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(50)
  description      String          @db.VarChar(500)
  price            Decimal         @db.Decimal(10, 2)
  minDuration      Int
  maxDuration      Int
  category         String          @db.VarChar(50)
  available        Boolean         @default(true)
  discount         Decimal         @default(0.0) @db.Decimal(10, 2)
  image            String?         @db.VarChar(255)
  ageRequirement   AgeRequirement? @relation(fields: [ageRequirementId], references: [id])
  ageRequirementId Int?
  appointments     Appointment[]
}

model AdditionalService {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(50)
  description      String          @db.VarChar(500)
  price            Decimal         @db.Decimal(10, 2)
  minDuration      Int
  maxDuration      Int
  category         String          @db.VarChar(50)
  available        Boolean         @default(true)
  discount         Decimal         @default(0.0) @db.Decimal(10, 2)
  image            String?         @db.VarChar(255)
  ageRequirement   AgeRequirement? @relation(fields: [ageRequirementId], references: [id])
  ageRequirementId Int?
  appointments     Appointment[]   @relation("appointment_additional_service")
}

model Appointment {
  id                 Int                 @id @default(autoincrement())
  appointmentDate    DateTime
  appointmentTime    DateTime
  guestFirstName     String?             @db.VarChar(100)
  guestLastName      String?             @db.VarChar(100)
  guestEmail         String?             @db.VarChar(255)
  guestPhoneNumber   String?             @db.VarChar(15)
  accountId          Int?
  account            Account?            @relation(fields: [accountId], references: [id])
  service            Service?            @relation(fields: [serviceId], references: [id])
  serviceId          Int?
  additionalServices AdditionalService[] @relation("appointment_additional_service")
  @@map("appointments")
}

model Account {
  id             Int           @id @default(autoincrement())
  firstName      String        @db.VarChar(30)
  lastName       String        @db.VarChar(30)
  password       String        @db.VarChar(255)
  email          String        @unique @db.VarChar(255)
  dateJoined     DateTime      @default(now())
  isStaff        Boolean       @default(false)
  userLevel      UserLevel     @default(basic)
  profilePicture String        @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcREPvmzUnSZWU_AQX3YpiUS5kpMldREZhYKMQ&usqp=CAU") @db.VarChar(255)
  appointments   Appointment[]
}

enum UserLevel {
  basic
  premium
  vip
}
